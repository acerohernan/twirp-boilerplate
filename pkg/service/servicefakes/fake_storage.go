// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/acerohernan/twirp-boilerplate/core"
	"github.com/acerohernan/twirp-boilerplate/pkg/service"
)

type FakeStorage struct {
	StoreSessionStub        func(context.Context, *core.Session) error
	storeSessionMutex       sync.RWMutex
	storeSessionArgsForCall []struct {
		arg1 context.Context
		arg2 *core.Session
	}
	storeSessionReturns struct {
		result1 error
	}
	storeSessionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) StoreSession(arg1 context.Context, arg2 *core.Session) error {
	fake.storeSessionMutex.Lock()
	ret, specificReturn := fake.storeSessionReturnsOnCall[len(fake.storeSessionArgsForCall)]
	fake.storeSessionArgsForCall = append(fake.storeSessionArgsForCall, struct {
		arg1 context.Context
		arg2 *core.Session
	}{arg1, arg2})
	stub := fake.StoreSessionStub
	fakeReturns := fake.storeSessionReturns
	fake.recordInvocation("StoreSession", []interface{}{arg1, arg2})
	fake.storeSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStorage) StoreSessionCallCount() int {
	fake.storeSessionMutex.RLock()
	defer fake.storeSessionMutex.RUnlock()
	return len(fake.storeSessionArgsForCall)
}

func (fake *FakeStorage) StoreSessionCalls(stub func(context.Context, *core.Session) error) {
	fake.storeSessionMutex.Lock()
	defer fake.storeSessionMutex.Unlock()
	fake.StoreSessionStub = stub
}

func (fake *FakeStorage) StoreSessionArgsForCall(i int) (context.Context, *core.Session) {
	fake.storeSessionMutex.RLock()
	defer fake.storeSessionMutex.RUnlock()
	argsForCall := fake.storeSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStorage) StoreSessionReturns(result1 error) {
	fake.storeSessionMutex.Lock()
	defer fake.storeSessionMutex.Unlock()
	fake.StoreSessionStub = nil
	fake.storeSessionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) StoreSessionReturnsOnCall(i int, result1 error) {
	fake.storeSessionMutex.Lock()
	defer fake.storeSessionMutex.Unlock()
	fake.StoreSessionStub = nil
	if fake.storeSessionReturnsOnCall == nil {
		fake.storeSessionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeSessionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.storeSessionMutex.RLock()
	defer fake.storeSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Storage = new(FakeStorage)
